- can_edit = current_user.authorized?(:edit, media_entry)
- is_expert = current_user.groups.is_member?("Expert")

%section#content_head
  .container_12.clearfix
    #page_head
      #detail-main.grid_12

        .action_menu
          = _("Aktionen")
          .icon.arrow.up_and_down
          .action_menu_list.right
            %ul
              - if current_user and current_user.authorized?(:edit, media_entry)
                %li
                  = link_to edit_media_resource_path(media_entry), :title => "Metadaten editieren" do
                    .edit.icon
                    = _("Editieren")
              - if is_expert and media_entry.snapshotable?
                %li
                  = link_to edit_tms_media_entry_path(@media_entry) do
                    .edit.icon
                    = _("Metadaten für MIZ-Archiv editieren")
                - if can_edit
                  %li
                    = link_to to_snapshot_media_entry_path(media_entry) do
                      .copy.icon
                      = _("Kopie für MIZ-Archiv erstellen")
              %li
                %span.favorite_link{:id => "fav_#{media_entry.id}", :title => "Als Favorit merken"}
                  = link_to toggle_favorites_media_resource_path(media_entry), :remote => true, :"data-type" => "html", :method => :post do
                    - s = (current_user.favorite_ids.include?(media_entry.id) ? "on" : "off")
                    %div{:class => "icon button_favorit_#{s}" }
                    = "Favorisieren"
              - if media_entry.meta_data.for_meta_terms.exists?
                %li
                  = link_to browse_media_entry_path(media_entry), :title => "Nach vergleichbaren Medieneinträgen erkunden" do
                    .browse.icon
                    = _("Erkunden")
              %li
                = link_to "",
                :title => "Zugriffsberechtigungen lesen/bearbeiten",
                :class => "open_permission_lightbox", 
                :"data-media_resource_ids" => "[#{@media_entry.id}]",
                :"data-redirect_url" => "#{root_path}",
                :"data-current_user" => "#{current_user.to_json(:only=>:id, :include => :groups)}" do
                  .permissions.icon
                  = "Zugriffsberechtigungen"
              %li
                = media_sets_widget(@media_entry, "<div class='edit_arcs icon'></div> <span class='text'>Zu Set hinzufügen/entfernen</span>", nil, {}, "link")
              %li
                = link_to "#", :panel => "download", :title => "Auf meinen Computer herunterladen" do
                  .export.icon
                  = _("Exportieren")
              - if current_user and current_user.authorized?(:manage, media_entry)
                %li
                  %a{:href => "/media_resources/#{media_entry.id}", :title => "Unwiederbringlich entfernen", :onclick => "$(this).bind('ajax:success', function(){window.location = '/'});", :"data-method" => "delete", :"data-remote" => true, :class => "delete_me", :"data-type" => 'json', :"data-confirm" => "Sind Sie sicher dass Sie diesen Inhalt löschen möchten?"}
                    .trash.icon
                    %span.text= "Löschen"
              %li
                %a.open_create_set_dialog{:title => "Neues Set erstellen"}
                  .create_set.icon
                  %span.text= "Neues Set"

        .head-tabs
          %h2.title.grid_8
            %br
            =# render :partial => "meta_data/show", :locals => { :meta_datum => media_entry.meta_data.get("title"), :resource => media_entry, :context => nil }
            = media_entry.meta_data.get_value_for("title")
          .core.clearfix
            .detail-image.grid_9.alpha.omega
              = thumb_for(media_entry, :large).html_safe
            #detail-sidebar.grid_3.omega
              #detail-excerpt.sidebar-box
                - context = MetaContext.core
                - media_entry.meta_data_for_context(context).collect do |meta_datum|
                  - definition = meta_datum.meta_key.meta_key_definitions.for_context(context)
                  %h4
                    = definition.label.to_s
                  = render :partial => "meta_data/show", :locals => { :meta_datum => meta_datum, :resource => media_entry, :context => context }
              = render :partial => "media_entries/browsing"

        #detail-set-bar
          - sets = media_entry.media_sets.select {|media_set| current_user.authorized?(:view, media_set) }
          - unless sets.empty?
            = media_sets_list(sets, true)

        #download-panel.actionbar-panel{:style => "display: none"}
          .actionbar-inner-panel
            = render :partial => "download", :object => media_entry, :as => :media_entry
        .clear

%section#meta_data
  = meta_data(media_entry, is_expert)
  .clear

:javascript
  
  $(document).ready(function () {
  
    MetaDataToggler.setup();

    /* FIXME: Remove me completely later on
    $(".scrollable").each(function(){
      // enable the jquery tools scrollable plugin only on elements wich are higher then their content
      if($(this).find(".items").height() > $(this).height()) {
        $(this).scrollable({ vertical: true, mousewheel: true });
        // disable the next button when the last seeked element whas the last element in the list
        $(this).bind("onSeek", function() {
          if(parseInt($(this).find(".items").height())+parseInt($(this).find(".items").css("top")) <= $(this).height()) {
            $(this).parent().find(".next").addClass("disabled");
          }
        });
        // stops the plugin from scrolling when the last element is visible already
         $(this).bind("onBeforeSeek", function(event, index) {

          if(parseInt($(this).find(".items").height())+parseInt($(this).find(".items").css("top")) <= $(this).height()) {
            // only prevent from scrolling if the direction is forward
            if(index > $(this).data("scrollable").getIndex()) {
              return false;
            }
          }
        });
      } else {
        $(this).parent().find(".next").addClass("disabled");
      }
    });
    */

    // OPTIMIZE
    $('a#delete_me').bind('confirm:complete', function(){
      var media_resources_json = get_media_resources_json();
      var i = is_Selected(media_resources_json, $(this).data("id"));
      if (i > -1) {
        media_resources_json.splice(i, 1);
        set_media_resources_json(media_resources_json);
      };
    })

  });

  
  var MetaDataToggler = new MetaDataToggler();
  
  function MetaDataToggler() {
  
    this.setup = function () {
      $(".meta_context_group > h5").bind("click",function(){
        var _this = $(this); 
        _this.closest(".meta_context_group").toggleClass("open");
        
        if(_this.data("link")){
          $.ajax({
            url: _this.data("link"),
            data: {format: 'js'},
            dataType: 'html',
            success: function(data){
              var new_div = $("<div class='meta_group'></div>");
              new_div.append(data);
              _this.after(new_div);
            }
          });
          _this.removeAttr("data-link").removeData("link");
        }
      });
    }
  }