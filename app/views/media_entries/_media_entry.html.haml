- can_edit = Permission.authorized?(current_user, :edit, media_entry)
- is_expert = current_user.groups.is_member?("Expert")

.container_12
  #detail-main.grid_8.alpha
    %h2.title{:style => "margin: 0 10px 10px 0;"}
      = render :partial => "meta_data/show", :locals => { :meta_datum => media_entry.meta_data.get("title"), :resource => media_entry, :context => nil }
    #detail-image
      = thumb_for(media_entry, :large)
    #detail-action-bar.clearfix
      %ul#toggle-panel.clearfix
        - if current_user && Permission.authorized?(current_user, :edit, media_entry)
          %li= link_to image_tag("icons/button_edit_active.png"), edit_media_entry_path(media_entry), :title => "Editieren"
        %li
          %span.favorite_link{:id => "fav_#{media_entry.id}", :title => "Favorit"}
            = render :partial => "media_entries/favorite_link", :locals => {:media_entry => media_entry}
        - if current_user && Permission.authorized?(current_user, :manage, media_entry)
          %li= link_to image_tag("icons/button_delete_active.png"), "#", :panel => "delete"
        %li= link_to _("Exportieren"), "#", :panel => "download"
        %li= link_to _("Zu Set/Projekt hinzufügen"), "#", :panel => "media_set"
        - if is_expert and media_entry.snapshotable?
          %li= link_to _("Metadaten für MIZ-Archiv editieren"), edit_tms_media_entry_path(@media_entry)
          - if can_edit
            %li= link_to _("Kopie für MIZ-Archiv erstellen"), to_snapshot_media_entry_path(media_entry)
    #delete-panel.actionbar-panel{:style => "display: none"}
      .actionbar-inner-panel
        = _("Wollen Sie diesen Medieneintrag und alle zugehörigen Dateien wirklich löschen? Sie können dies nicht rückgängig machen. Die Daten sind unwiederbringlich verloren.")
        = link_to _("Löschen"), media_entry_path(media_entry), :id => "delete_me", :method => :delete, :confirm => _("Sind Sie sicher?"), :"data-id" => media_entry.id
    #download-panel.actionbar-panel{:style => "display: none"}
      .actionbar-inner-panel
        = render :partial => "download", :object => media_entry, :as => :media_entry
    #media_set-panel.actionbar-panel{:style => "display: none"}
      .actionbar-inner-panel
        - if logged_in?
          = media_sets_setter(media_sets_media_entry_path(media_entry))
        - else
          = _("Bitte anmelden.")
    .clear
    #additional-metadata
      %h3.tab-title= _("Metadaten")
      #detail_specification.tabs
        %ul
          - (MetaContext.defaults + media_entry.individual_contexts).collect do |meta_context|
            %li
              = link_to meta_context, polymorphic_path([media_entry, :meta_data], :context_id => meta_context)
          %li
            = link_to _("Datei"), polymorphic_path([:objective, media_entry, :meta_data])
          - if media_entry.media_file.meta_data and media_entry.media_file.meta_data["GPS:GPSLatitude"] and media_entry.media_file.meta_data["GPS:GPSLongitude"]
            %li= link_to _("Karte"), [:map, media_entry]
          - if is_expert
            - meta_context = MetaContext.tms
            %li
              = link_to meta_context, polymorphic_path([media_entry, :meta_data], :context_id => meta_context) 
      %h3.tab-title{:style => "margin-top: 2em"}= _("Weitere Informationen")
      #further_information.tabs
        %ul
          %li= link_to _("Aktivitäten"), "#usage-tabs-1"
          %li= link_to _("Zugriffsberechtigungen"), edit_multiple_media_entry_permissions_path(media_entry)
        #usage-tabs-1.meta_data
          %table.metadata-table
            %tr
              %td
                = _("Hochgeladen von")
              %td
                = link_to media_entry.user, media_entries_path(:query => media_entry.user.fullname)
            %tr
              %td
                = _("Hochgeladen am") 
              %td
                = _("%s Uhr") % media_entry.created_at.to_formatted_s(:date_time)
            - edit_sessions = media_entry.edit_sessions
            - unless edit_sessions.empty?
              %tr
                %td
                  = _("Letzte Aktualisierung")
                %td
                  %ul
                    - edit_sessions.each do |edit_session|
                      %li
                        = link_to edit_session.user, edit_session.user
                        = " / #{_("%s Uhr") % edit_session.created_at.to_formatted_s(:date_time)}"
            - description_author_before_import = media_entry.meta_data.get_value_for("description author before import") 
            - unless description_author_before_import.blank?
              %tr
                %td{:style => "text-align: right; font-weight: bold;"}
                  = _("Beschreibung durch (vor dem Hochladen ins Medienarchiv)")
                %td= description_author_before_import
              - unless media_entry.snapshots.empty?
                %tr
                  %td{:style => "text-align: right; font-weight: bold;"}= _("MIZ-Archiv Kopie") 
                  %td= "#{_("%s Uhr") % media_entry.snapshots.first.created_at.to_formatted_s(:date_time)}"
              
  #detail-sidebar.grid_4.omega
    #detail-excerpt.sidebar-box
      - context = MetaContext.core
      - media_entry.meta_data_for_context(context).collect do |meta_datum|
        - definition = meta_datum.meta_key.meta_key_definitions.for_context(context)
        %h4{:style => "margin-top: 10px;"}= definition.meta_field.label.to_s
        = render :partial => "meta_data/show", :locals => { :meta_datum => meta_datum, :resource => media_entry, :context => context }
      - if is_expert 
        - unless media_entry.snapshots.empty?
          .notice_tms
            - date = media_entry.snapshots.first.created_at.to_formatted_s(:date)
            - time = media_entry.snapshots.first.created_at.to_formatted_s(:time)
            = "Eine Kopie dieses Medieneintrages wurde am #{date} um #{time} Uhr für das MIZ-Archiv erstellt."
        - unless media_entry.snapshotable?
          .notice_tms{:style => "margin-top: 100px;"}
            = _("Diese Kopie wird gegenwärtig durch das MIZ-Archiv bearbeitet.")
      - sets = media_entry.media_sets.select {|media_set| Permission.authorized?(current_user, :view, media_set) }
      - unless sets.empty?
        = media_sets_list(sets)
    = render :partial => "media_entries/browsing"
.clear

:javascript
  // OPTIMIZE
  $('a#delete_me').bind('confirm:complete', function(){
    var media_entries_json = get_media_entries_json();
    var i = is_Selected(media_entries_json, $(this).data("id"));
    if (i > -1) {
      media_entries_json.splice(i, 1);
      set_media_entries_json(JSON.stringify(media_entries_json));
    };
  })
  
  // OPTIMIZE Action Bar
  $("a[panel]").click(function(){
    to_open = !$(this).hasClass("active");

    $("a.active[panel]").each(function () {
      $(this).removeClass("active");
      $(this).css("background", "");
      $("div#"+$(this).attr("panel")+"-panel").slideUp("slow");
    });

    if(to_open){
      $(this).addClass("active");
      $(this).css("background", "transparent url('/assets/icons/arrow-up-04.png') 50% bottom no-repeat");
      $("div#"+$(this).attr("panel")+"-panel").slideDown("slow");
    }
    
    return false;
  });
