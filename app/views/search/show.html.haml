%section#content_body_result
  .page_title_left
    =_("Suchergebnisse")
    #term
      = "für “#{params[:query]}”"
  .clear
  - if [@media_entries[:entries], @media_sets[:entries], @projects[:entries]].all? {|x| x.nil? }
    = "Ihre Suche nach “#{params[:query]}” hat keine Resultate ergeben."
  - else 
    #detail_specification.tabs
      %ul
        %li
          = link_to "Medieneinträge (#{@paginated_media_entry_ids.total_entries})", "#media_entry_tab"
        %li
          = link_to "Sets (#{@paginated_media_set_ids.total_entries})", "#set_tab" 
        %li
          = link_to "Projekte (#{@paginated_project_ids.total_entries})", "#project_tab"
      #media_entry_tab.clearfix 
        .filter_area
          = render :partial => 'filter_form', :locals => {:resource_ids => @_media_entry_ids, :type => "MediaEntry" }
        %div{:id => "media_entry_results", :class => "result_area" }
          = render :partial => 'results', :locals => { :type => "media_entry", :json => @media_entries.to_json }
      #set_tab.clearfix   
        .filter_area
          = render :partial => 'filter_form', :locals => {:resource_ids => @_media_set_ids, :type => "Media::Set" }
        %div{:id => "set_results", :class => "result_area" }
          = render :partial => 'results', :locals => { :type => "set", :json => @media_sets.to_json }
      #project_tab.clearfix  
        .filter_area
          = render :partial => 'filter_form', :locals => {:resource_ids => @_media_project_ids, :type => "Media::Set" }
        %div{:id => "project_results", :class => "result_area" }
          = render :partial => 'results', :locals => { :type => "project",  :json => @projects.to_json }

= render :partial => "media_entries/batch_bar"

= javascript_include_tag "batch_actions"

:javascript
  $(document).ready(function () { 
    setupBatch(#{@media_entries.to_json});    

    $('#detail_specification').tabs();
    
    $('.filter_box h3.filter_category a.filter_category_link').click(function() {
      var icon = $(this).siblings('span.ui-icon');
      var to_toggle = $(this).parent().next('.filter_content');

    	to_toggle.toggle();
    	if (to_toggle.is(":visible")) {
    	  icon.removeClass('ui-icon-triangle-1-e').addClass('ui-icon-triangle-1-s');
    	} else {
    	  icon.removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-e');
    	};
    	return false;
    });

    var checkboxes = $(".filter_content input[data-item_ids]:checkbox");
    checkboxes.change(function(){
      var parent_form = $(this).closest("form");
      var sibling_checkboxes = parent_form.find("input[data-item_ids]:checkbox");
      var intersected_ids = parent_form.data('item_ids');
      sibling_checkboxes.filter(":checked").each(function(i, elem){
        var a = $(elem).data('item_ids');
        intersected_ids = (i ? intersected_ids.intersect(a) : a );
      });
      sibling_checkboxes.each(function(){
        var that = $(this);
        var a = that.data('item_ids');
        if(intersected_ids) a = intersected_ids.intersect(a);
        that.next(".total_ids").html(a.length);
        if(a.length){
          that.closest("li").removeClass("disabled");
          that.removeAttr("disabled");
        }else{
          that.closest("li").addClass("disabled");
          that.attr("disabled", "disabled");
        }
      });
      var submit_value = "Filter anwenden";
      if(intersected_ids) submit_value += " ("+intersected_ids.length+")";
      parent_form.find(".filter_footer #search-submit").val(submit_value);
      parent_form.find("input#filter_ids").val(intersected_ids.join(','));
    });

    $(".filter_content form").live('ajax:complete.rails', function(xhr, response){ // TODO ajax:success ??
      var json = JSON.parse(response.responseText);
      var container = $(".result_area:visible:first");
      container.empty();
      display_results(json, container)      
    });
    
    /* TODO
    $( "#slider-range" ).slider({
      range: true,
      min: 0,
      max: 500,
      values: [ 75, 300 ],
      slide: function( event, ui ) {
      }
    });
    */
  });
