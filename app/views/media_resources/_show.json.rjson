h = {
  id: media_resource.id,
  type: media_resource.type.underscore
}

if with ||= nil
  [:user_id, :created_at, :updated_at].each do |k|
    h[k] = media_resource.send(k) if with[k]
  end

  if with[:image]
    size = with[:image][:size] || :small # TODO :small_125 ??
    h[:image] = case with[:image][:as]
      when "base64"
        media_resource.get_media_file(current_user).try(:thumb_base64, size)
      else # default return is a url to the image
        "/media_resources/%d/image?size=%s" % [media_resource.id, size]
    end            
  end
  
  if with[:meta_data]
    h[:meta_data] = []
    if meta_context_names = with[:meta_data][:meta_context_names]
      meta_context_names.each do |name|
        h[:meta_data] += media_resource.meta_data_for_context(MetaContext.send(name)).map do |md|
          # this doesn't work because formats is frozen as [:html] only
          # render(md)
          render(:partial => "meta_data/meta_datum.json.rjson", :locals => {:meta_datum => md, :with => {:label => {:context => "core"}}})
        end
      end
    end
    if meta_key_names = with[:meta_data][:meta_key_names]
      h[:meta_data] += meta_key_names.map do |name|
        md = media_resource.meta_data.get(name)
        # this doesn't work because formats is frozen as [:html] only
        # render(md)
        render(:partial => "meta_data/meta_datum.json.rjson", :locals => {:meta_datum => md, :with => {:label => {:context => "core"}}})
      end
    end
  end
  
  if with[:media_type]
    h[:media_type] = media_resource.media_type
  end
  
  if with[:filename]
    h[:filename] = media_resource.is_a?(MediaSet) ? nil : media_resource.media_file.filename
  end

  if with[:flags]
    h[:is_public] = media_resource.is_public?
    h[:is_private] = h[:is_public] ? false : media_resource.is_private?(current_user)
    h[:is_shared] = (not h[:is_public] and not h[:is_private]) # TODO drop and move to frontend
    h[:is_editable] = current_user.authorized?(:edit, media_resource)
    h[:is_manageable] = current_user.authorized?(:manage, media_resource)
    h[:is_favorite] = current_user.favorite_ids.include?(media_resource.id)
  end
  
  if with[:parents]
    pagination = ((with[:parents].is_a? Hash) ? with[:parents][:pagination] : nil) || true
    forwarded_with = (with[:parents].is_a? Hash) ? (with[:parents][:with]||=nil) : nil
    h[:parents] = render :partial => "media_resources/index.json.rjson", :locals => {:pagination => pagination, :media_resources => media_resource.parents, :with => forwarded_with }
  end

  case media_resource.type
    when "MediaSet"
      if with[:children]
        h[:children] = begin
          type = with[:children].is_a?(Hash) and with[:children][:type] ? with[:children][:type] : nil 
          media_resources = if type == "media_entry"
            media_resource.media_entries
          elsif type == "media_set"
            media_resource.child_sets
          else # respond with media_resources children
            media_resource.children
          end
          pagination = ((with[:children].is_a? Hash) ? with[:children][:pagination] : nil) || true
          forwarded_with = (with[:children].is_a? Hash) ? (with[:children][:with]||=nil) : nil
          render :partial => "media_resources/index.json.rjson", :locals => {:pagination => pagination, :media_resources => media_resources, :with => forwarded_with}  
        end
      end
    
    when "MediaEntry"
      [:media_file_id].each do |k|
        h[k] = media_resource.send(k) if with[k]
      end
      if with[:flags]
        h[:can_maybe_browse] = media_resource.meta_data.for_meta_terms.exists?
      end
  end
end

h
