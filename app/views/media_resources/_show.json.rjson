h = {id: media_resource.id}

## IMAGE
if with and with[:image]
  size = with[:image][:size] || :small
  
  h["image"] = case with[:image][:as]
    when "base64"
      mf = if media_resource.is_a?(MediaSet)
            media_resource.media_entries.accessible_by_user(current_user).order("media_resources.updated_at DESC").first.try(:media_file)
           else
            media_resource.media_file
           end
      mf ? mf.thumb_base64(size) : nil
    else # default return is a url to the image
      "/media_resources/%d/image?size=%s" % [id, size]
  end            
end

## META DATA
if with and with[:meta_data]
  h["meta_data"] = []
  
  if meta_context_names = with[:meta_data][:meta_context_names]
    meta_context_names.each do |name|
      media_resource.meta_data_for_context(MetaContext.find_by_name(name)).each do |md|
        h["meta_data"].push render(:partial => "meta_data/show.json.rjson", :locals => {:meta_datum => md})
      end
    end
  end
end

## TYPE
if with and with[:type]
  h["type"] = media_resource.class.to_s.underscore
end

## FILENAME
if with and with[:filename]
  h["filename"] = media_resource.is_a?(MediaSet) ? nil : media_resource.media_file.filename
end

## 

h
