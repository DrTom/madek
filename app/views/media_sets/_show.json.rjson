h = render :partial => "media_resources/show.json.rjson", :locals => {:media_resource => media_set, :with => with}

if (with || nil)
  if with[:children]
    forward_with = with.select{|k,v| k != :children}
    h[:children] = begin
      media_resources = if with[:children] == "media_entry"
        media_set.media_entries
      elsif with[:children] == "media_set"
        media_set.child_sets
      else # respond with media_resources children
        media_set.children
      end
      render :partial => "media_resources/index.json.rjson", :locals => {:media_resources => media_resources, :with => forward_with}  
    end
  end
end

=begin
[:id, :user_id, :created_at, :updated_at].each do |k|
  h[k] = @media_set.send(k)
end

h[:owner_id] = @media_set.user_id

h[:media_entries] = @media_entries.map do |media_entry|
  render :partial => "media_entries/show.json.rjson", :locals => {:media_entry => media_entry}
end

###############################################################

    json[:is_set] = true # TODO use :type instead of :is_set  # TODO drop as default
    if(with = options[:with])
      if(with[:media_set] and with[:media_set].is_a?(Hash))
        if with[:media_set].has_key?(:child_sets) and (with[:media_set][:child_sets].is_a?(Hash) or not with[:media_set][:child_sets].to_i.zero?)
          json[:child_sets] = child_sets.accessible_by_user(options[:current_user]).as_json(:with => {:media_set => with[:media_set][:media_sets]})
        end
        if with[:media_set].has_key?(:parent_sets) and (with[:media_set][:parent_sets].is_a?(Hash) or not with[:media_set][:parent_sets].to_i.zero?)
          json[:parent_sets] = parent_sets.accessible_by_user(options[:current_user]).as_json({:with => {:media_set => with[:media_set][:parent_sets]}}.merge(:current_user => options[:current_user]))
        end
        if with[:media_set].has_key?(:media_entries) and (with[:media_set][:media_entries].is_a?(Hash) or not with[:media_set][:media_entries].to_i.zero?)
          json[:media_entries] = media_entries.accessible_by_user(options[:current_user]).as_json(:with => {:media_entry => with[:media_set][:media_entries]})
        end
        # child media_resources


      end
    end

=end

h