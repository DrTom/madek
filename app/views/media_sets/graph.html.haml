%section#content_body.media_sets_graph
  = render partial: "media_resources/bar"

  #zoom_panel  
    %button.zoom_in
      Zoom In
    %button.zoom_out
      Zoom Out

  #chart
  #inspector.media_resources.index.grid
  
:css
  #inspector {
    display: inline-block;
    height: 1000px;
    width: 200px;
    position: absolute;
    margin-left: 10px;
    right: 0;
    top: 125px;
  }
  
  #chart {
    display: inline-block;
    height: 100%;
  }
  
  /*
  path.link {
    fill: none;
    stroke: #666;
    stroke-width: 1px;
  }
    
  circle {
    fill: #ccc;
    stroke: #333;
    stroke-width: 1px;
  }
  */
  
  .link {
    stroke: #666;
    stroke-width: 1px;
  }
  
  .node text {
    pointer-events: none;
    font: 10px sans-serif;
  }
  
:javascript
  $(document).ready(function () {
    /*
    d3.json("http://bl.ocks.org/d/950642/graph.json", function(json) {
    });
    */

    var width = $("#content_body").innerWidth() - $("#inspector").outerWidth(),
        height = window.innerHeight - $("#content_body").offset().top -$("footer").height(),
        marker_size = 10;
	
    var svg = d3.select("#chart").append("svg")
        .attr("width", width)
        .attr("height", height)
        .call(d3.behavior.zoom().on("zoom", redraw)).attr("scale", 1).append("g");

  	var force = d3.layout.force()
      .gravity(0.04)
      .friction(0.6)
      .charge(-100)
      .distance(120)
      .size([width, height]);
	
    d3.json(document.location.href + ".json", function(json) {
      var nodes = {};
      var links = [];
      json.nodes.forEach(function(node) {
        nodes[node.id] = node; //{name: node.name, img_src: node.img_src};
      });
      json.links.forEach(function(link) {
        //link.source = json.nodes[link.source] || (json.nodes[link.source] = {name: link.source});
        //link.target = json.nodes[link.target] || (json.nodes[link.target] = {name: link.target});
        links.push({source: nodes[link.source_id], target: nodes[link.target_id], type: "suit"});
      });
      force
        .nodes(d3.values(nodes))
        .links(links)
        .start();

      var link = svg.selectAll(".link")
          .data(force.links())
        .enter().append("line")
          .attr("class", "link");

      var node = svg.selectAll(".node")
          .data(force.nodes())
        .enter().append("g")
          .attr("class", "node")
          .attr("data-id", function(d) { return d.id; })
          .call(force.drag);
    
      node.append("image")
          .attr("xlink:href", function(d) { return d.img_src; })
          .attr("x", "-20px")
          .attr("y", "-20px")
          .attr("width", "40px")
          .attr("height", "40px");
    
      node.append("text")
          .attr("dx", 12)
          .attr("dy", ".35em")
          .text(function(d) { return d.name });
    
      force.on("tick", function() {
        link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
    
        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
      });
                     
    });

    function redraw() {
      svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    }

    $("button.zoom_in").click(function(){
      svg.attr("scale", parseFloat(svg.attr("scale")) * 1.1);
      svg.attr("transform", "scale(" + svg.attr("scale") + ")");
    });
    $("button.zoom_out").click(function(){
      svg.attr("scale", parseFloat(svg.attr("scale")) * 0.9);
      svg.attr("transform", "scale(" + svg.attr("scale") + ")");
    });
    //

    new App.MediaSetsGraph;
  });



/
  :plain  
    /*
    // Per-type markers, as they don't inherit styles.
    svg.append("defs").selectAll("marker")
        .data(["suit"])
      .enter().append("marker")
        .attr("id", String)
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 30)
        //.attr("refY", -3.0)
        .attr("markerWidth", marker_size)
        .attr("markerHeight", marker_size)
        .attr("orient", "auto")
      .append("path")
      .attr("d", "M0,-5L10,0L0,5");
    
    var path = svg.append("g").selectAll("path")
        .data(force.links())
      .enter().append("path")
        .attr("class", function(d) { return "link " + d.type; })
        .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });
    
    var circle = svg.append("g").selectAll("circle")
        .data(force.nodes())
      .enter() //.append("circle")
        //.attr("r", marker_size);
      .append("svg:image")
          .attr("class", "circle")
          //.attr("title", function(d) { return d.name; })
    
    var text = svg.append("g").selectAll("g")
        .data(force.nodes())
      .enter() //.append("g");
        .append("svg:text")
          .attr("class", "nodetext")
          .attr("dx", 12)
          .attr("dy", ".35em")
          .text(function(d) { return d.name });        
    
    force.on("tick", function() {
      path.attr("d", function(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = 0; //Math.sqrt(dx * dx + dy * dy); // Use elliptical arc path segments to doubly-encode directionality.
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
      });
    
      circle.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
    
      text.attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
    });
    */
    
