:ruby
  thumb_class = "thumb_box_set"
  tab_title = _("Set")
  content_title = _("Set")
  icon_class = "icon_set"
  can_edit = current_user.authorized?(:edit, @media_set)

%section#content_head
  .container_12.clearfix
    #page_head
      .grid_3
        #set_info
          %div.item_box_set
            %div.item_permission_set
              = display_permission(@media_set, :icon)
            %div{:class => thumb_class}
              = thumb_for(@media_set, :small_125)
        #set_actions
          - if can_edit
            = display_edit_icon(@media_set, current_user)
            = display_delete_icon(@media_set, current_user)
          = media_sets_widget(@media_set)
          = link_to "",
          :title => "Zugriffsberechtigung",
          :class => "open_permission_lightbox", 
          :"data-media_resource_ids" => "[#{@media_set.id}]",
          :"data-redirect_url" => "#{root_path}",
          :"data-current_user" => "#{current_user.to_json(:only=>:id, :include => :groups)}" do
            .button_permissions
          %span.favorite_link{:id => "fav_#{@media_set.id}", :title => "Favorit"}
            = render :partial => "media_resources/favorite_link", :locals => {:media_resource => @media_set}
          - if can_edit
            = link_to "",
            :title => "Inhalte hervorheben",
            :class => "open_media_set_highlights_lightbox" do
              .button_highlights

      .grid_9
        #detail_specification.tabs
          %ul
            %li
              = link_to tab_title, "#info_tab"
            - unless @media_set.individual_contexts.empty?
              %li
                = link_to _("Auszug"), "#abstract_tab"
              %li
                = link_to _("Vokabular"), "#vocabulary_tab"
              -# %li
              -#    = link_to _("Vokabular Browser"), browse_media_set_path(@media_set), :class => "vocabulary_tab_browse"
            - if can_edit and !@media_set.individual_and_inheritable_contexts.empty?
              %li
                = link_to _("Kontexte"), "#contexts_tab"

          #info_tab.clearfix
            - context = MetaContext.media_set
            = display_meta_data_for_context(@media_set, context)
          - unless @media_set.individual_contexts.empty?
            = render :partial => "media_entries/browsing"
            #abstract_tab.clearfix
              %p= _("Diese Metadaten wurden am häufigsten vergeben. Sie zeigen den thematischen Schwerpunkt des Projekts an.")
              - total_children = @media_set.children.accessible_by_user(current_user).count
              = display_set_abstract_slider(@media_set, total_children)
              = display_set_abstract(@media_set, (total_children * 30 / 100), current_user)
            #vocabulary_tab.clearfix
              = display_set_vocabulary(@media_set, current_user)
          - if can_edit and !@media_set.individual_and_inheritable_contexts.empty?
            #contexts_tab.clearfix
              %p= _("Diesem Set sind zusätzliche Kontexte mit Metadaten zugewiesen.")
              = form_for @media_set, :html => {:style => "margin: 2em;"} do |f|
                = hidden_field_tag "individual_context_ids[]", nil # NOTE sending params[:individual_context_ids] even if no checkbox is checked
                %ul
                  - @media_set.individual_and_inheritable_contexts.each do |context|
                    %li
                      %label
                        = check_box_tag "individual_context_ids[]", context.id, @media_set.individual_contexts.include?(context), :class => "individual_context", :autocomplete => "off"
                        %strong= context
                      = link_to context, :target => :_blank, :title => context.description do
                        ="Kontext anzeigen"    
                %div{:class => "save_buttons"}   
                  = link_to _("Abbrechen"), "", :id => "revert_context_change"
                  = submit_tag _("Speichern")
              .clear
              %hr
              %p= _("So können für alle Medieneinträge, die in diesem Set enthalten sind, weitere inhaltliche Angaben gemacht werden. Darüber hinaus können alle Sets, die diesem Set zugewiesen werden, ebenfalls die ausgewählten zusätzlichen Kontexte erhalten.")

%section#content_body_set
  #media_set_highlights{:class => (@media_set.out_arcs.any?(&:highlight)) ? "any" : nil, :"data-parent_id" => @media_set.id}
    .container
      .inner
    .media_set_highlights_shadow.left
    .media_set_highlights_shadow.right
  - unless @parents.empty?
    %div.page_title_left.set_parents_title
      .icon_set_parents
      = _("Set enthalten in")
      %span
        = _("Dieses Set ist in %s enthalten") % pluralize(@parents.size, "Set")
    .clear
    #parents.media_resources.index.grid
  %section#children.media_resources.index
    = render :partial => "media_resources/index"

:ruby
  with = {:media_type => true,
          :image=>{:as=>"base64", :size=>"large"},
          :meta_data => {:meta_context_names => ["core"]}}

:javascript
  $(document).ready(function () {
    // hide parents at start
    $("#parents").hide();
        
    // setup parents of current sets
    var parents_as_json = #{render(:partial => "media_resources/index",:formats => [:json],:handlers => [:rjson],:locals => {:media_resources => @parents,:with => with})};
    $("#parents").append($.tmpl("tmpl/media_resource/thumb_box", parents_as_json.media_resources));

    // show parents toggle
    $(".set_parents_title").click(function(){
      $("#parents").toggle();
      $(".icon_set_parents").toggleClass("open");
    });
  });
  
:coffeescript
  jQuery ->
    MediaSetHighlights.setup #{render(:partial => "media_resources/index",
                                      :formats => [:json],
                                      :handlers => [:rjson],
                                      :locals => {:with => with,
                                                  :media_resources => @media_set.out_arcs.select(&:highlight).map(&:child)})}
  
    $(".individual_context").change ->
      $(this).toggleClass("changed")
      
    $("#revert_context_change").click (event)->
      event.preventDefault()
      $("input.changed[type=checkbox]").each ->
        if $(this).attr("checked")?
          $(this).attr("checked", "checked")
        else
          $(this).removeAttr("checked")
        $(this).removeClass("changed")
      return false
  
