:ruby
  icon_class = case params[:type]
    when "projects"
      "icon_project"
    else
      "icon_set"
  end
  accessible_resource_ids = current_user.accessible_resource_ids

/ #3105#
.filter_area
  = render :partial => 'resources/filter_form', :locals => {:resource_ids => @_media_set_ids, :type => "Media::Set" }

- unless @media_set
  - if params[:type] != "projects"
    .container_12.clearfix
      %section#page_head_newset.clearfix
        .grid_12
          #set_info
            %div.item_box_set
              %div.thumb_box_set
          #set_meta
            %small
              &nbsp;
            %h5
              = _("Neues Set erstellen")
            - context = MetaContext.media_set
            - media_set = current_user.media_sets.build # (:type => "Media::Set")
            = form_for [current_user, media_set] do |f|
              %table.label
                = f.fields_for :meta_data, media_set.meta_data.get("title") do |meta_datum|
                  - definition = meta_datum.object.meta_key.meta_key_definitions.for_context(context)
                  %tr
                    %td
                      %p
                        = "#{definition.meta_field.label}:"
                    %td{:style => "float: left;"}
                      = field_tag(meta_datum, context)
                    %td{:style => "float: left;"}
                      = f.submit _("Erstellen")

  .container_12.clearfix
    %section#content_body.clearfix
      %div.page_title_left
        - if @media_sets
          %div{:class => icon_class}
          %a{:id => "meine", :name => "meine", :href => "#"}
          = @my_title
      .pagination
        %a{:href => "#weitere"}
          = @other_title
          &darr;
      .clear
      - @my_media_sets.each do |media_set|
        = media_set_title(media_set, true, true, 9, accessible_resource_ids) 
    
  .container_12.clearfix
    %section#content_body2.clearfix
      %div.page_title_left
        %a{:id => "weitere", :name => "weitere", :href => "#"}
        %div{:class => icon_class}
        = @other_title
      .pagination   
        %a{:href => "#meine"}
          = @my_title
          &uarr;
      .clear
      - @media_sets.each do |media_set|
        = media_set_title(media_set, true, true, 9, accessible_resource_ids)

- else # FeaturedSet
  .container_12.clearfix
    %section#content_body.clearfix
      %div.page_title_left
        %div{:class => icon_class}
        = @my_title
      .clear
      - if @media_sets.any?
        - @media_sets.each do |media_set|
          = media_set_title(media_set, true, true, 9, accessible_resource_ids)
      - else 
        = _("Keine Sets vorhanden")



=#Rails3.1# javascript_include_tag "batch_actions"
    
:javascript
  $(document).ready(function () {
    /////////////////////////////////// dry start
    // #3105#
    $('.filter_box h3.filter_category a.filter_category_link').click(function() {
      var icon = $(this).siblings('span.ui-icon');
      var to_toggle = $(this).parent().next('.filter_content');

      to_toggle.toggle();
      if (to_toggle.is(":visible")) {
        icon.removeClass('ui-icon-triangle-1-e').addClass('ui-icon-triangle-1-s');
      } else {
        icon.removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-e');
      };
      return false;
    });

    var checkboxes = $(".filter_content input[data-item_ids]:checkbox");
    checkboxes.change(function(){
      var parent_form = $(this).closest("form");
      var sibling_checkboxes = parent_form.find("input[data-item_ids]:checkbox");
      var intersected_ids = parent_form.data('item_ids');
      sibling_checkboxes.filter(":checked").each(function(i, elem){
        var a = $(elem).data('item_ids');
        intersected_ids = (i ? intersected_ids.intersect(a) : a );
      });
      sibling_checkboxes.each(function(){
        var that = $(this);
        var a = that.data('item_ids');
        if(intersected_ids) a = intersected_ids.intersect(a);
        that.next(".total_ids").html(a.length);
        if(a.length){
          that.closest("li").removeClass("disabled");
          that.removeAttr("disabled");
        }else{
          that.closest("li").addClass("disabled");
          that.attr("disabled", "disabled");
        }
      });
      var submit_value = "Filter anwenden";
      if(intersected_ids) submit_value += " ("+intersected_ids.length+")";
      parent_form.find(".filter_footer #filter-submit").val(submit_value);
      parent_form.find("input#filter_ids").val(intersected_ids.join(','));
    });

    $(".filter_content form").live('ajax:complete.rails', function(xhr, response){ // TODO ajax:success ??
      var json = JSON.parse(response.responseText);
      var container = $("#results");
      container.empty();
      display_results(json, container)      
    });
    /////////////////////////////////// dry end

  });
