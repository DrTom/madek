= javascript_include_tag "plupload/i18n/de.js"

#upload-container
  
  #uploader
  
  %p
    %strong= "Akzeptierte Dateigrösse:"
    = "Dateien mit einer Grösse von über 1.4 GB müssen über eine FTP-Dropbox in das Medienarchiv geladen werden."
    %br
    = link_to "So laden Sie Dateien über die FTP-Dropbox ins Medienarchiv.", "javascript:void(0)", :style => "cursor:pointer", :class => "open_dropbox_dialog"
  %p
    %strong= "Akzeptierte Dateiformate:"
    = "Bilder (TIFF, JPEG, PNG) sowie Audio- und Videofiles in den gängigsten Formaten werden direkt verarbeitet und dargestellt. Weitere Dateitypen (PDFs, PSDs, Webarchive) können ebenfalls hochgeladen werden, sind vorerst jedoch nur als ZIP-Datei verfügbar."
    
:coffeescript
  
  window.dropbox_exists = #{@dropbox_exists.to_json}
  window.dropbox_files = #{@dropbox_files_json}
  window.dropbox_info = #{@dropbox_info.to_json}
  window.dropbox_transfer_finished = false
  window.dropbox_sync_interval
  window.dropbox_sync_interval_time = 2000
  window.max_file_size = "1400mb"
  window.uploader
  window.media_entry_incompletes = #{ render(template:"media_entry_incompletes/index.json.rabl") }
  
  jQuery ->
    initalize_plupload()
    remove_not_needed_plupload_elements()
    setup_media_entry_incomplete_files(media_entry_incompletes)
    setup_dropbox_sync()
    setup_dropbox_transfer_trigger()
    bind_upload_progress()
    bind_upload_complete()
    bind_add_files()
    bind_remove_files()
    validate_continue_button()
    setup_open_dropbox_dialog()
    setup_file_size_error()
    
  setup_open_dropbox_dialog = ->
    $(".open_dropbox_dialog").live "click", ->
      open_dropbox_dialog(false)
    $("#create_dropbox").live "ajax:beforeSend", ->
      $(this).html("Dropbox wird erstellt <img class='loading' src='/assets/loading.gif'/>")
      $(this).bind "click", (event) ->
        event.stopImmediatePropagation()
        event.preventDefault()
    $("#create_dropbox").live "ajax:success", (event, response, settings)->
      window.dropbox_info = response
      window.dropbox_exists = true 
      $("#no_ftp").hide()
      $("#ftp_existing").show()
      $(".dialog").closest(".ui-dialog").css("height", "auto")
      setup_dropbox_sync()
  
  open_dropbox_dialog = (error)->
    content = if !error then $.tmpl("tmpl/upload/dropbox_info") else $.tmpl("tmpl/upload/dropbox_info", {error:error})  
    trigger = if !error then $(".open_dropbox_dialog") else $(".plupload_add")
  
    Dialog.add {
      trigger: trigger
      content: content
      dialogClass: "dropbox_info"
      closeOnEscape: true
    }
  
  validate_continue_button = ->
    console.log "VALIDATE CONTINUE BUTTON"
    if $(".plupload_content li:not(.plupload_done):visible").length == 0
      enable_continue_button()
    else 
      disable_continue_button()
      
  enable_continue_button = ->
    console.log "ENABLE"
    button = $("#upload_navigation .next")
    button.removeClass("disabled")
    button.attr("href", button.data("link_when_enabled"))
    
  disable_continue_button = ->
    console.log "DISABLE"
    button = $("#upload_navigation .next")
    button.addClass("disabled")
    button.attr("href", "javascript:void(0)")
  
  setup_dropbox_sync = ->
    return false if dropbox_exists is false
    setup_dopbox_files dropbox_files if dropbox_files.length > 0
    # load dropbox files with an interval
    window.dropbox_sync_interval = window.setInterval ->
      $.ajax({
        url: "upload"
        success: (data, status, request) ->
          window.dropbox_files = data
          setup_dopbox_files data
        type: "GET"
        data: format:"json"
      })
    , window.dropbox_sync_interval_time
    
  setup_dropbox_transfer_trigger = ->
    $(".plupload_start").live "click", (e)->
      if $(e.currentTarget).hasClass("dropbox_enabled")
        start_dropbox_transfer() 
      
  setup_dopbox_files = (files)->
    # if container is gone create the container again
    if $("#uploader #dropbox_filelist").length == 0
      $("#uploader #uploader_filelist").after $("<ul id='dropbox_filelist'></ul>")
    
    # add files
    for file in files
      setup_dropbox_file file
    
    # remove files that where deleted
    for dropbox_element in $("#uploader #dropbox_filelist li")
      file_exists = false
      for file in files
        if $(dropbox_element).tmplItem().data.dirname == file.dirname and $(dropbox_element).tmplItem().data.filename == file.filename
          file_exists = true
      if not file_exists
        $(dropbox_element).remove()
    
    # validate continue
    validate_continue_button()
    
  setup_dropbox_file = (file)->
    # if file list-element is not already exisiting create
    already_existing = false
    for dropbox_element in $("#uploader #dropbox_filelist li")
      if $(dropbox_element).tmplItem().data.dirname == file.dirname and $(dropbox_element).tmplItem().data.filename == file.filename  
        already_existing = true
    if not already_existing
      template = $.tmpl("tmpl/upload/dropbox_file", file)
      $("#uploader #dropbox_filelist").prepend template
    # setup dropbox transfer button
    $(".plupload_button.plupload_start").addClass "dropbox_enabled"

  initalize_plupload = ->
    $("#uploader").pluploadQueue
      runtimes: 'html5,html4'
      url: "#{upload_path(:format => :js)}"
      drop_element: "uploader"
      max_file_size: window.max_file_size
      multipart_params:
        '#{request_forgery_protection_token}': '#{form_authenticity_token}',
        '#{request.session_options[:key]}': '#{request.session_options[:id]}'
    
    window.uploader = $("#uploader").pluploadQueue()
  
  remove_not_needed_plupload_elements = ->
    $("#uploader_container").removeAttr("title")
  
  bind_upload_progress = ->
    uploader.bind "UploadProgress", (uploader, file) ->
      set_custom_progress()
  
  set_custom_progress = ->
    amount_not_transfered = $("#uploader_filelist li:not(.plupload_done):visible").length + $("#dropbox_filelist li:not(.plupload_done):visible").length
    amount_transfered = $("#uploader_filelist li.plupload_done").length + $("#dropbox_filelist li.plupload_done").length
    amount_total =  $("#uploader_filelist li:visible").length + $("#dropbox_filelist li:visible").length
    # customize progress status text
    upload_status_text = $("#uploader .plupload_upload_status").html().replace(/\d+\/\d+/, (amount_total-amount_not_transfered)+"/"+amount_total)
    $("#uploader .plupload_upload_status").html(upload_status_text)
    # customize progress bar
    progress_bar_width = 100-(amount_not_transfered/amount_total*100) 
    $("#uploader .plupload_progress_bar").width(progress_bar_width+"%")
  
  bind_upload_complete = ->
    uploader.bind "UploadComplete", (uploader) ->
      set_custom_progress()
      $("#uploader .plupload_progress").show()
      start_dropbox_transfer()
  
  bind_add_files = ->
    uploader.bind "FilesAdded", (uploader, files) ->
      window.setTimeout ->
        validate_continue_button()
        for element in $("#uploader_filelist li.plupload_delete")
          prevent_plupload_delete($(element))
      , 200
      
  prevent_plupload_delete = (element) ->
    cloned_action = $(element).find(".plupload_file_action a").clone()
    $(element).find(".plupload_file_action a").remove()
    $(element).find(".plupload_file_action").prepend cloned_action
    $(element).addClass("plupload_transfer").removeClass("plupload_delete")    
  
  bind_remove_files = ->
    uploader.bind "FilesRemoved", (uploader, files) ->
      window.setTimeout ->
        validate_continue_button()
      , 200
              
  start_dropbox_transfer = ->
    clearInterval window.dropbox_sync_interval
    finish_transfer() if $("#dropbox_filelist li").length is 0
    # show progress
    $(".plupload_filelist_footer .plupload_buttons").hide()
    $(".plupload_filelist_footer .plupload_file_name").show()
    $(".plupload_filelist_footer .plupload_upload_status").show()
    $(".plupload_filelist_footer .plupload_upload_status").html(plupload.translate("Uploaded %d/%d files").replace(/%d/g, "0"))
    $(".plupload_filelist_footer .plupload_progress").show()
    # begin transfer each file seperately
    for dropbox_file in dropbox_files
      # mark file as transfer in progress
      $("#dropbox_filelist li").each (i_element, element) ->
        if($(element).tmplItem().data.dirname == dropbox_file.dirname && $(element).tmplItem().data.filename == dropbox_file.filename)
          $(element).removeClass("plupload_delete").addClass("plupload_uploading")
          $(element).find(".plupload_file_status").html("50%")
      # transfer dropbox file
      $.ajax({
        url: "/upload"
        success: (data, status, request) ->
          set_custom_progress()
          $("#dropbox_filelist li").each (i_element, element) ->
            if($(element).tmplItem().data.dirname == dropbox_file.dirname && $(element).tmplItem().data.filename == dropbox_file.filename)
              $(element).removeClass("plupload_uploading").addClass("plupload_done")
              $(element).find(".plupload_file_status").html("100%")
              $(element).find(".plupload_file_action").show()
        error: (request, status, error) ->
          console.log("ERROR")
        type: "POST"
        data: 
          format:"json"
          dropbox_file:
            dirname: dropbox_file.dirname
            filename: dropbox_file.filename
      })
    
  finish_transfer = ->
    enable_continue_button()
  
  setup_media_entry_incomplete_files = (files)->
    # if container is gone create the container again
    if $("#uploader #mei_filelist").length == 0
      $("#uploader #uploader_filelist").after $("<ul id='mei_filelist'></ul>")
    
    # add files
    for file in files
      setup_media_entry_incomplete_file file
      
  setup_media_entry_incomplete_file = (file)->
    template = $.tmpl("tmpl/upload/mei_file", file)
    $("#uploader #mei_filelist").prepend template 

  setup_file_size_error = ->
    uploader.bind "error", (uploader, error) ->
      if error.code = -600
        open_dropbox_dialog(error.message)
    window.alert = (msg)->
      #prevent plupload error message
